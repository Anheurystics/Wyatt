Terminals unused in grammar

   PIPE


State 57 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: %empty
    2        | function program
    3        | vert_shader program
    4        | frag_shader program

    5 vert_shader: VERTEX IDENTIFIER SHADER SEMICOLON

    6 frag_shader: FRAGMENT IDENTIFIER SHADER SEMICOLON

    7 function: FUNC IDENTIFIER OPEN_PAREN param_list CLOSE_PAREN block

    8 expr: scalar
    9     | vec2
   10     | vec3
   11     | vec4
   12     | bool
   13     | invoke
   14     | uniform
   15     | IDENTIFIER
   16     | expr PLUS expr
   17     | expr MINUS expr
   18     | expr MULT expr
   19     | expr DIV expr
   20     | expr MOD expr
   21     | expr LESS_THAN expr
   22     | expr GREATER_THAN expr
   23     | expr EQUAL expr
   24     | expr NEQUAL expr
   25     | expr LEQUAL expr
   26     | expr GEQUAL expr
   27     | MINUS expr
   28     | OPEN_PAREN expr OPEN_PAREN

   29 uniform: IDENTIFIER PERIOD IDENTIFIER

   30 stmt: IDENTIFIER EQUALS expr
   31     | uniform EQUALS expr
   32     | ALLOCATE IDENTIFIER
   33     | IDENTIFIER OPEN_BRACKET IDENTIFIER CLOSE_BRACKET UPLOAD upload_list
   34     | DRAW IDENTIFIER
   35     | USE IDENTIFIER
   36     | PRINT expr
   37     | RETURN expr
   38     | invoke
   39     | IDENTIFIER COMP_PLUS expr
   40     | IDENTIFIER COMP_MINUS expr
   41     | IDENTIFIER COMP_MULT expr
   42     | IDENTIFIER COMP_DIV expr
   43     | IDENTIFIER COMP_MOD expr

   44 arg_list: %empty
   45         | expr
   46         | arg_list COMMA expr

   47 param_list: %empty
   48           | IDENTIFIER
   49           | param_list COMMA IDENTIFIER

   50 invoke: IDENTIFIER OPEN_PAREN arg_list CLOSE_PAREN

   51 stmt_block: IF OPEN_PAREN expr CLOSE_PAREN block
   52           | IF OPEN_PAREN expr CLOSE_PAREN stmt SEMICOLON
   53           | WHILE OPEN_PAREN expr CLOSE_PAREN block

   54 stmts: %empty
   55      | stmts stmt SEMICOLON
   56      | stmts stmt_block

   57 block: OPEN_BRACE stmts CLOSE_BRACE

   58 upload_list: expr
   59            | upload_list COMMA expr

   60 bool: BOOL
   61     | bool AND bool
   62     | bool OR bool
   63     | NOT bool

   64 scalar: INT
   65       | FLOAT

   66 vec2: OPEN_BRACKET expr COMMA expr CLOSE_BRACKET

   67 vec3: OPEN_BRACKET expr COMMA expr COMMA expr CLOSE_BRACKET

   68 vec4: OPEN_BRACKET expr COMMA expr COMMA expr COMMA expr CLOSE_BRACKET


Terminals, with rules where they appear

$end (0) 0
error (256)
BOOL (258) 60
INT (259) 64
FLOAT (260) 65
IDENTIFIER (261) 5 6 7 15 29 30 32 33 34 35 39 40 41 42 43 48 49 50
SHADER (262) 5 6
SEMICOLON (263) 5 6 52 55
OPEN_BRACE (264) 57
CLOSE_BRACE (265) 57
PIPE (266)
OPEN_PAREN (267) 7 28 50 51 52 53
CLOSE_PAREN (268) 7 50 51 52 53
LESS_THAN (269) 21
GREATER_THAN (270) 22
OPEN_BRACKET (271) 33 66 67 68
CLOSE_BRACKET (272) 33 66 67 68
COMMA (273) 46 49 59 66 67 68
PERIOD (274) 29
EQUALS (275) 30 31
COMP_PLUS (276) 39
COMP_MINUS (277) 40
COMP_MULT (278) 41
COMP_DIV (279) 42
COMP_MOD (280) 43
FUNC (281) 7
AND (282) 61
OR (283) 62
NOT (284) 63
IF (285) 51 52
WHILE (286) 53
ALLOCATE (287) 32
UPLOAD (288) 33
DRAW (289) 34
VERTEX (290) 5
FRAGMENT (291) 6
PRINT (292) 36
USE (293) 35
RETURN (294) 37
PLUS (295) 16
MINUS (296) 17 27
MULT (297) 18
DIV (298) 19
MOD (299) 20
UNARY (300)
EQUAL (301) 23
NEQUAL (302) 24
GEQUAL (303) 26
LEQUAL (304) 25


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
program (51)
    on left: 1 2 3 4, on right: 0 2 3 4
vert_shader (52)
    on left: 5, on right: 3
frag_shader (53)
    on left: 6, on right: 4
function (54)
    on left: 7, on right: 2
expr (55)
    on left: 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
    27 28, on right: 16 17 18 19 20 21 22 23 24 25 26 27 28 30 31 36
    37 39 40 41 42 43 45 46 51 52 53 58 59 66 67 68
uniform (56)
    on left: 29, on right: 14 31
stmt (57)
    on left: 30 31 32 33 34 35 36 37 38 39 40 41 42 43, on right: 52
    55
arg_list (58)
    on left: 44 45 46, on right: 46 50
param_list (59)
    on left: 47 48 49, on right: 7 49
invoke (60)
    on left: 50, on right: 13 38
stmt_block (61)
    on left: 51 52 53, on right: 56
stmts (62)
    on left: 54 55 56, on right: 55 56 57
block (63)
    on left: 57, on right: 7 51 53
upload_list (64)
    on left: 58 59, on right: 33 59
bool (65)
    on left: 60 61 62 63, on right: 12 61 62 63
scalar (66)
    on left: 64 65, on right: 8
vec2 (67)
    on left: 66, on right: 9
vec3 (68)
    on left: 67, on right: 10
vec4 (69)
    on left: 68, on right: 11


State 0

    0 $accept: . program $end

    FUNC      shift, and go to state 1
    VERTEX    shift, and go to state 2
    FRAGMENT  shift, and go to state 3

    $default  reduce using rule 1 (program)

    program      go to state 4
    vert_shader  go to state 5
    frag_shader  go to state 6
    function     go to state 7


State 1

    7 function: FUNC . IDENTIFIER OPEN_PAREN param_list CLOSE_PAREN block

    IDENTIFIER  shift, and go to state 8


State 2

    5 vert_shader: VERTEX . IDENTIFIER SHADER SEMICOLON

    IDENTIFIER  shift, and go to state 9


State 3

    6 frag_shader: FRAGMENT . IDENTIFIER SHADER SEMICOLON

    IDENTIFIER  shift, and go to state 10


State 4

    0 $accept: program . $end

    $end  shift, and go to state 11


State 5

    3 program: vert_shader . program

    FUNC      shift, and go to state 1
    VERTEX    shift, and go to state 2
    FRAGMENT  shift, and go to state 3

    $default  reduce using rule 1 (program)

    program      go to state 12
    vert_shader  go to state 5
    frag_shader  go to state 6
    function     go to state 7


State 6

    4 program: frag_shader . program

    FUNC      shift, and go to state 1
    VERTEX    shift, and go to state 2
    FRAGMENT  shift, and go to state 3

    $default  reduce using rule 1 (program)

    program      go to state 13
    vert_shader  go to state 5
    frag_shader  go to state 6
    function     go to state 7


State 7

    2 program: function . program

    FUNC      shift, and go to state 1
    VERTEX    shift, and go to state 2
    FRAGMENT  shift, and go to state 3

    $default  reduce using rule 1 (program)

    program      go to state 14
    vert_shader  go to state 5
    frag_shader  go to state 6
    function     go to state 7


State 8

    7 function: FUNC IDENTIFIER . OPEN_PAREN param_list CLOSE_PAREN block

    OPEN_PAREN  shift, and go to state 15


State 9

    5 vert_shader: VERTEX IDENTIFIER . SHADER SEMICOLON

    SHADER  shift, and go to state 16


State 10

    6 frag_shader: FRAGMENT IDENTIFIER . SHADER SEMICOLON

    SHADER  shift, and go to state 17


State 11

    0 $accept: program $end .

    $default  accept


State 12

    3 program: vert_shader program .

    $default  reduce using rule 3 (program)


State 13

    4 program: frag_shader program .

    $default  reduce using rule 4 (program)


State 14

    2 program: function program .

    $default  reduce using rule 2 (program)


State 15

    7 function: FUNC IDENTIFIER OPEN_PAREN . param_list CLOSE_PAREN block

    IDENTIFIER  shift, and go to state 18

    $default  reduce using rule 47 (param_list)

    param_list  go to state 19


State 16

    5 vert_shader: VERTEX IDENTIFIER SHADER . SEMICOLON

    SEMICOLON  shift, and go to state 20


State 17

    6 frag_shader: FRAGMENT IDENTIFIER SHADER . SEMICOLON

    SEMICOLON  shift, and go to state 21


State 18

   48 param_list: IDENTIFIER .

    $default  reduce using rule 48 (param_list)


State 19

    7 function: FUNC IDENTIFIER OPEN_PAREN param_list . CLOSE_PAREN block
   49 param_list: param_list . COMMA IDENTIFIER

    CLOSE_PAREN  shift, and go to state 22
    COMMA        shift, and go to state 23


State 20

    5 vert_shader: VERTEX IDENTIFIER SHADER SEMICOLON .

    $default  reduce using rule 5 (vert_shader)


State 21

    6 frag_shader: FRAGMENT IDENTIFIER SHADER SEMICOLON .

    $default  reduce using rule 6 (frag_shader)


State 22

    7 function: FUNC IDENTIFIER OPEN_PAREN param_list CLOSE_PAREN . block

    OPEN_BRACE  shift, and go to state 24

    block  go to state 25


State 23

   49 param_list: param_list COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 26


State 24

   57 block: OPEN_BRACE . stmts CLOSE_BRACE

    $default  reduce using rule 54 (stmts)

    stmts  go to state 27


State 25

    7 function: FUNC IDENTIFIER OPEN_PAREN param_list CLOSE_PAREN block .

    $default  reduce using rule 7 (function)


State 26

   49 param_list: param_list COMMA IDENTIFIER .

    $default  reduce using rule 49 (param_list)


State 27

   55 stmts: stmts . stmt SEMICOLON
   56      | stmts . stmt_block
   57 block: OPEN_BRACE stmts . CLOSE_BRACE

    IDENTIFIER   shift, and go to state 28
    CLOSE_BRACE  shift, and go to state 29
    IF           shift, and go to state 30
    WHILE        shift, and go to state 31
    ALLOCATE     shift, and go to state 32
    DRAW         shift, and go to state 33
    PRINT        shift, and go to state 34
    USE          shift, and go to state 35
    RETURN       shift, and go to state 36

    uniform     go to state 37
    stmt        go to state 38
    invoke      go to state 39
    stmt_block  go to state 40


State 28

   29 uniform: IDENTIFIER . PERIOD IDENTIFIER
   30 stmt: IDENTIFIER . EQUALS expr
   33     | IDENTIFIER . OPEN_BRACKET IDENTIFIER CLOSE_BRACKET UPLOAD upload_list
   39     | IDENTIFIER . COMP_PLUS expr
   40     | IDENTIFIER . COMP_MINUS expr
   41     | IDENTIFIER . COMP_MULT expr
   42     | IDENTIFIER . COMP_DIV expr
   43     | IDENTIFIER . COMP_MOD expr
   50 invoke: IDENTIFIER . OPEN_PAREN arg_list CLOSE_PAREN

    OPEN_PAREN    shift, and go to state 41
    OPEN_BRACKET  shift, and go to state 42
    PERIOD        shift, and go to state 43
    EQUALS        shift, and go to state 44
    COMP_PLUS     shift, and go to state 45
    COMP_MINUS    shift, and go to state 46
    COMP_MULT     shift, and go to state 47
    COMP_DIV      shift, and go to state 48
    COMP_MOD      shift, and go to state 49


State 29

   57 block: OPEN_BRACE stmts CLOSE_BRACE .

    $default  reduce using rule 57 (block)


State 30

   51 stmt_block: IF . OPEN_PAREN expr CLOSE_PAREN block
   52           | IF . OPEN_PAREN expr CLOSE_PAREN stmt SEMICOLON

    OPEN_PAREN  shift, and go to state 50


State 31

   53 stmt_block: WHILE . OPEN_PAREN expr CLOSE_PAREN block

    OPEN_PAREN  shift, and go to state 51


State 32

   32 stmt: ALLOCATE . IDENTIFIER

    IDENTIFIER  shift, and go to state 52


State 33

   34 stmt: DRAW . IDENTIFIER

    IDENTIFIER  shift, and go to state 53


State 34

   36 stmt: PRINT . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 62
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 35

   35 stmt: USE . IDENTIFIER

    IDENTIFIER  shift, and go to state 70


State 36

   37 stmt: RETURN . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 71
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 37

   31 stmt: uniform . EQUALS expr

    EQUALS  shift, and go to state 72


State 38

   55 stmts: stmts stmt . SEMICOLON

    SEMICOLON  shift, and go to state 73


State 39

   38 stmt: invoke .

    $default  reduce using rule 38 (stmt)


State 40

   56 stmts: stmts stmt_block .

    $default  reduce using rule 56 (stmts)


State 41

   50 invoke: IDENTIFIER OPEN_PAREN . arg_list CLOSE_PAREN

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    $default  reduce using rule 44 (arg_list)

    expr      go to state 74
    uniform   go to state 63
    arg_list  go to state 75
    invoke    go to state 64
    bool      go to state 65
    scalar    go to state 66
    vec2      go to state 67
    vec3      go to state 68
    vec4      go to state 69


State 42

   33 stmt: IDENTIFIER OPEN_BRACKET . IDENTIFIER CLOSE_BRACKET UPLOAD upload_list

    IDENTIFIER  shift, and go to state 76


State 43

   29 uniform: IDENTIFIER PERIOD . IDENTIFIER

    IDENTIFIER  shift, and go to state 77


State 44

   30 stmt: IDENTIFIER EQUALS . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 78
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 45

   39 stmt: IDENTIFIER COMP_PLUS . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 79
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 46

   40 stmt: IDENTIFIER COMP_MINUS . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 80
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 47

   41 stmt: IDENTIFIER COMP_MULT . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 81
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 48

   42 stmt: IDENTIFIER COMP_DIV . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 82
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 49

   43 stmt: IDENTIFIER COMP_MOD . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 83
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 50

   51 stmt_block: IF OPEN_PAREN . expr CLOSE_PAREN block
   52           | IF OPEN_PAREN . expr CLOSE_PAREN stmt SEMICOLON

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 84
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 51

   53 stmt_block: WHILE OPEN_PAREN . expr CLOSE_PAREN block

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 85
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 52

   32 stmt: ALLOCATE IDENTIFIER .

    $default  reduce using rule 32 (stmt)


State 53

   34 stmt: DRAW IDENTIFIER .

    $default  reduce using rule 34 (stmt)


State 54

   60 bool: BOOL .

    $default  reduce using rule 60 (bool)


State 55

   64 scalar: INT .

    $default  reduce using rule 64 (scalar)


State 56

   65 scalar: FLOAT .

    $default  reduce using rule 65 (scalar)


State 57

   15 expr: IDENTIFIER .
   29 uniform: IDENTIFIER . PERIOD IDENTIFIER
   50 invoke: IDENTIFIER . OPEN_PAREN arg_list CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 41
    PERIOD      shift, and go to state 43

    OPEN_PAREN  [reduce using rule 15 (expr)]
    $default    reduce using rule 15 (expr)


State 58

   28 expr: OPEN_PAREN . expr OPEN_PAREN

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 86
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 59

   66 vec2: OPEN_BRACKET . expr COMMA expr CLOSE_BRACKET
   67 vec3: OPEN_BRACKET . expr COMMA expr COMMA expr CLOSE_BRACKET
   68 vec4: OPEN_BRACKET . expr COMMA expr COMMA expr COMMA expr CLOSE_BRACKET

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 87
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 60

   63 bool: NOT . bool

    BOOL  shift, and go to state 54
    NOT   shift, and go to state 60

    bool  go to state 88


State 61

   27 expr: MINUS . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 89
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 62

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr
   36 stmt: PRINT expr .

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    PLUS          shift, and go to state 92
    MINUS         shift, and go to state 93
    MULT          shift, and go to state 94
    DIV           shift, and go to state 95
    MOD           shift, and go to state 96
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100

    $default  reduce using rule 36 (stmt)


State 63

   14 expr: uniform .

    $default  reduce using rule 14 (expr)


State 64

   13 expr: invoke .

    $default  reduce using rule 13 (expr)


State 65

   12 expr: bool .
   61 bool: bool . AND bool
   62     | bool . OR bool

    AND  shift, and go to state 101
    OR   shift, and go to state 102

    $default  reduce using rule 12 (expr)


State 66

    8 expr: scalar .

    $default  reduce using rule 8 (expr)


State 67

    9 expr: vec2 .

    $default  reduce using rule 9 (expr)


State 68

   10 expr: vec3 .

    $default  reduce using rule 10 (expr)


State 69

   11 expr: vec4 .

    $default  reduce using rule 11 (expr)


State 70

   35 stmt: USE IDENTIFIER .

    $default  reduce using rule 35 (stmt)


State 71

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr
   37 stmt: RETURN expr .

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    PLUS          shift, and go to state 92
    MINUS         shift, and go to state 93
    MULT          shift, and go to state 94
    DIV           shift, and go to state 95
    MOD           shift, and go to state 96
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100

    $default  reduce using rule 37 (stmt)


State 72

   31 stmt: uniform EQUALS . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 103
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 73

   55 stmts: stmts stmt SEMICOLON .

    $default  reduce using rule 55 (stmts)


State 74

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr
   45 arg_list: expr .

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    PLUS          shift, and go to state 92
    MINUS         shift, and go to state 93
    MULT          shift, and go to state 94
    DIV           shift, and go to state 95
    MOD           shift, and go to state 96
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100

    $default  reduce using rule 45 (arg_list)


State 75

   46 arg_list: arg_list . COMMA expr
   50 invoke: IDENTIFIER OPEN_PAREN arg_list . CLOSE_PAREN

    CLOSE_PAREN  shift, and go to state 104
    COMMA        shift, and go to state 105


State 76

   33 stmt: IDENTIFIER OPEN_BRACKET IDENTIFIER . CLOSE_BRACKET UPLOAD upload_list

    CLOSE_BRACKET  shift, and go to state 106


State 77

   29 uniform: IDENTIFIER PERIOD IDENTIFIER .

    $default  reduce using rule 29 (uniform)


State 78

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr
   30 stmt: IDENTIFIER EQUALS expr .

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    PLUS          shift, and go to state 92
    MINUS         shift, and go to state 93
    MULT          shift, and go to state 94
    DIV           shift, and go to state 95
    MOD           shift, and go to state 96
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100

    $default  reduce using rule 30 (stmt)


State 79

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr
   39 stmt: IDENTIFIER COMP_PLUS expr .

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    PLUS          shift, and go to state 92
    MINUS         shift, and go to state 93
    MULT          shift, and go to state 94
    DIV           shift, and go to state 95
    MOD           shift, and go to state 96
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100

    $default  reduce using rule 39 (stmt)


State 80

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr
   40 stmt: IDENTIFIER COMP_MINUS expr .

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    PLUS          shift, and go to state 92
    MINUS         shift, and go to state 93
    MULT          shift, and go to state 94
    DIV           shift, and go to state 95
    MOD           shift, and go to state 96
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100

    $default  reduce using rule 40 (stmt)


State 81

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr
   41 stmt: IDENTIFIER COMP_MULT expr .

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    PLUS          shift, and go to state 92
    MINUS         shift, and go to state 93
    MULT          shift, and go to state 94
    DIV           shift, and go to state 95
    MOD           shift, and go to state 96
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100

    $default  reduce using rule 41 (stmt)


State 82

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr
   42 stmt: IDENTIFIER COMP_DIV expr .

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    PLUS          shift, and go to state 92
    MINUS         shift, and go to state 93
    MULT          shift, and go to state 94
    DIV           shift, and go to state 95
    MOD           shift, and go to state 96
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100

    $default  reduce using rule 42 (stmt)


State 83

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr
   43 stmt: IDENTIFIER COMP_MOD expr .

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    PLUS          shift, and go to state 92
    MINUS         shift, and go to state 93
    MULT          shift, and go to state 94
    DIV           shift, and go to state 95
    MOD           shift, and go to state 96
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100

    $default  reduce using rule 43 (stmt)


State 84

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr
   51 stmt_block: IF OPEN_PAREN expr . CLOSE_PAREN block
   52           | IF OPEN_PAREN expr . CLOSE_PAREN stmt SEMICOLON

    CLOSE_PAREN   shift, and go to state 107
    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    PLUS          shift, and go to state 92
    MINUS         shift, and go to state 93
    MULT          shift, and go to state 94
    DIV           shift, and go to state 95
    MOD           shift, and go to state 96
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100


State 85

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr
   53 stmt_block: WHILE OPEN_PAREN expr . CLOSE_PAREN block

    CLOSE_PAREN   shift, and go to state 108
    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    PLUS          shift, and go to state 92
    MINUS         shift, and go to state 93
    MULT          shift, and go to state 94
    DIV           shift, and go to state 95
    MOD           shift, and go to state 96
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100


State 86

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr
   28     | OPEN_PAREN expr . OPEN_PAREN

    OPEN_PAREN    shift, and go to state 109
    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    PLUS          shift, and go to state 92
    MINUS         shift, and go to state 93
    MULT          shift, and go to state 94
    DIV           shift, and go to state 95
    MOD           shift, and go to state 96
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100


State 87

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr
   66 vec2: OPEN_BRACKET expr . COMMA expr CLOSE_BRACKET
   67 vec3: OPEN_BRACKET expr . COMMA expr COMMA expr CLOSE_BRACKET
   68 vec4: OPEN_BRACKET expr . COMMA expr COMMA expr COMMA expr CLOSE_BRACKET

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    COMMA         shift, and go to state 110
    PLUS          shift, and go to state 92
    MINUS         shift, and go to state 93
    MULT          shift, and go to state 94
    DIV           shift, and go to state 95
    MOD           shift, and go to state 96
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100


State 88

   61 bool: bool . AND bool
   62     | bool . OR bool
   63     | NOT bool .

    $default  reduce using rule 63 (bool)


State 89

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr
   27     | MINUS expr .

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100

    $default  reduce using rule 27 (expr)


State 90

   21 expr: expr LESS_THAN . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 111
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 91

   22 expr: expr GREATER_THAN . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 112
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 92

   16 expr: expr PLUS . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 113
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 93

   17 expr: expr MINUS . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 114
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 94

   18 expr: expr MULT . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 115
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 95

   19 expr: expr DIV . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 116
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 96

   20 expr: expr MOD . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 117
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 97

   23 expr: expr EQUAL . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 118
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 98

   24 expr: expr NEQUAL . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 119
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 99

   26 expr: expr GEQUAL . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 120
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 100

   25 expr: expr LEQUAL . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 121
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 101

   61 bool: bool AND . bool

    BOOL  shift, and go to state 54
    NOT   shift, and go to state 60

    bool  go to state 122


State 102

   62 bool: bool OR . bool

    BOOL  shift, and go to state 54
    NOT   shift, and go to state 60

    bool  go to state 123


State 103

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr
   31 stmt: uniform EQUALS expr .

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    PLUS          shift, and go to state 92
    MINUS         shift, and go to state 93
    MULT          shift, and go to state 94
    DIV           shift, and go to state 95
    MOD           shift, and go to state 96
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100

    $default  reduce using rule 31 (stmt)


State 104

   50 invoke: IDENTIFIER OPEN_PAREN arg_list CLOSE_PAREN .

    $default  reduce using rule 50 (invoke)


State 105

   46 arg_list: arg_list COMMA . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 124
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 106

   33 stmt: IDENTIFIER OPEN_BRACKET IDENTIFIER CLOSE_BRACKET . UPLOAD upload_list

    UPLOAD  shift, and go to state 125


State 107

   51 stmt_block: IF OPEN_PAREN expr CLOSE_PAREN . block
   52           | IF OPEN_PAREN expr CLOSE_PAREN . stmt SEMICOLON

    IDENTIFIER  shift, and go to state 28
    OPEN_BRACE  shift, and go to state 24
    ALLOCATE    shift, and go to state 32
    DRAW        shift, and go to state 33
    PRINT       shift, and go to state 34
    USE         shift, and go to state 35
    RETURN      shift, and go to state 36

    uniform  go to state 37
    stmt     go to state 126
    invoke   go to state 39
    block    go to state 127


State 108

   53 stmt_block: WHILE OPEN_PAREN expr CLOSE_PAREN . block

    OPEN_BRACE  shift, and go to state 24

    block  go to state 128


State 109

   28 expr: OPEN_PAREN expr OPEN_PAREN .

    $default  reduce using rule 28 (expr)


State 110

   66 vec2: OPEN_BRACKET expr COMMA . expr CLOSE_BRACKET
   67 vec3: OPEN_BRACKET expr COMMA . expr COMMA expr CLOSE_BRACKET
   68 vec4: OPEN_BRACKET expr COMMA . expr COMMA expr COMMA expr CLOSE_BRACKET

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 129
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 111

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   21     | expr LESS_THAN expr .
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr

    LESS_THAN     error (nonassociative)
    GREATER_THAN  error (nonassociative)

    $default  reduce using rule 21 (expr)


State 112

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   22     | expr GREATER_THAN expr .
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr

    LESS_THAN     error (nonassociative)
    GREATER_THAN  error (nonassociative)

    $default  reduce using rule 22 (expr)


State 113

   16 expr: expr . PLUS expr
   16     | expr PLUS expr .
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    MULT          shift, and go to state 94
    DIV           shift, and go to state 95
    MOD           shift, and go to state 96
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100

    $default  reduce using rule 16 (expr)


State 114

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   17     | expr MINUS expr .
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    MULT          shift, and go to state 94
    DIV           shift, and go to state 95
    MOD           shift, and go to state 96
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100

    $default  reduce using rule 17 (expr)


State 115

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   18     | expr MULT expr .
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100

    $default  reduce using rule 18 (expr)


State 116

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   19     | expr DIV expr .
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100

    $default  reduce using rule 19 (expr)


State 117

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   20     | expr MOD expr .
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100

    $default  reduce using rule 20 (expr)


State 118

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   23     | expr EQUAL expr .
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91

    EQUAL   error (nonassociative)
    NEQUAL  error (nonassociative)
    GEQUAL  error (nonassociative)
    LEQUAL  error (nonassociative)

    $default  reduce using rule 23 (expr)


State 119

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   24     | expr NEQUAL expr .
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91

    EQUAL   error (nonassociative)
    NEQUAL  error (nonassociative)
    GEQUAL  error (nonassociative)
    LEQUAL  error (nonassociative)

    $default  reduce using rule 24 (expr)


State 120

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr
   26     | expr GEQUAL expr .

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91

    EQUAL   error (nonassociative)
    NEQUAL  error (nonassociative)
    GEQUAL  error (nonassociative)
    LEQUAL  error (nonassociative)

    $default  reduce using rule 26 (expr)


State 121

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   25     | expr LEQUAL expr .
   26     | expr . GEQUAL expr

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91

    EQUAL   error (nonassociative)
    NEQUAL  error (nonassociative)
    GEQUAL  error (nonassociative)
    LEQUAL  error (nonassociative)

    $default  reduce using rule 25 (expr)


State 122

   61 bool: bool . AND bool
   61     | bool AND bool .
   62     | bool . OR bool

    $default  reduce using rule 61 (bool)


State 123

   61 bool: bool . AND bool
   62     | bool . OR bool
   62     | bool OR bool .

    $default  reduce using rule 62 (bool)


State 124

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr
   46 arg_list: arg_list COMMA expr .

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    PLUS          shift, and go to state 92
    MINUS         shift, and go to state 93
    MULT          shift, and go to state 94
    DIV           shift, and go to state 95
    MOD           shift, and go to state 96
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100

    $default  reduce using rule 46 (arg_list)


State 125

   33 stmt: IDENTIFIER OPEN_BRACKET IDENTIFIER CLOSE_BRACKET UPLOAD . upload_list

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr         go to state 130
    uniform      go to state 63
    invoke       go to state 64
    upload_list  go to state 131
    bool         go to state 65
    scalar       go to state 66
    vec2         go to state 67
    vec3         go to state 68
    vec4         go to state 69


State 126

   52 stmt_block: IF OPEN_PAREN expr CLOSE_PAREN stmt . SEMICOLON

    SEMICOLON  shift, and go to state 132


State 127

   51 stmt_block: IF OPEN_PAREN expr CLOSE_PAREN block .

    $default  reduce using rule 51 (stmt_block)


State 128

   53 stmt_block: WHILE OPEN_PAREN expr CLOSE_PAREN block .

    $default  reduce using rule 53 (stmt_block)


State 129

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr
   66 vec2: OPEN_BRACKET expr COMMA expr . CLOSE_BRACKET
   67 vec3: OPEN_BRACKET expr COMMA expr . COMMA expr CLOSE_BRACKET
   68 vec4: OPEN_BRACKET expr COMMA expr . COMMA expr COMMA expr CLOSE_BRACKET

    LESS_THAN      shift, and go to state 90
    GREATER_THAN   shift, and go to state 91
    CLOSE_BRACKET  shift, and go to state 133
    COMMA          shift, and go to state 134
    PLUS           shift, and go to state 92
    MINUS          shift, and go to state 93
    MULT           shift, and go to state 94
    DIV            shift, and go to state 95
    MOD            shift, and go to state 96
    EQUAL          shift, and go to state 97
    NEQUAL         shift, and go to state 98
    GEQUAL         shift, and go to state 99
    LEQUAL         shift, and go to state 100


State 130

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr
   58 upload_list: expr .

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    PLUS          shift, and go to state 92
    MINUS         shift, and go to state 93
    MULT          shift, and go to state 94
    DIV           shift, and go to state 95
    MOD           shift, and go to state 96
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100

    $default  reduce using rule 58 (upload_list)


State 131

   33 stmt: IDENTIFIER OPEN_BRACKET IDENTIFIER CLOSE_BRACKET UPLOAD upload_list .
   59 upload_list: upload_list . COMMA expr

    COMMA  shift, and go to state 135

    $default  reduce using rule 33 (stmt)


State 132

   52 stmt_block: IF OPEN_PAREN expr CLOSE_PAREN stmt SEMICOLON .

    $default  reduce using rule 52 (stmt_block)


State 133

   66 vec2: OPEN_BRACKET expr COMMA expr CLOSE_BRACKET .

    $default  reduce using rule 66 (vec2)


State 134

   67 vec3: OPEN_BRACKET expr COMMA expr COMMA . expr CLOSE_BRACKET
   68 vec4: OPEN_BRACKET expr COMMA expr COMMA . expr COMMA expr CLOSE_BRACKET

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 136
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 135

   59 upload_list: upload_list COMMA . expr

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 137
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 136

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr
   67 vec3: OPEN_BRACKET expr COMMA expr COMMA expr . CLOSE_BRACKET
   68 vec4: OPEN_BRACKET expr COMMA expr COMMA expr . COMMA expr CLOSE_BRACKET

    LESS_THAN      shift, and go to state 90
    GREATER_THAN   shift, and go to state 91
    CLOSE_BRACKET  shift, and go to state 138
    COMMA          shift, and go to state 139
    PLUS           shift, and go to state 92
    MINUS          shift, and go to state 93
    MULT           shift, and go to state 94
    DIV            shift, and go to state 95
    MOD            shift, and go to state 96
    EQUAL          shift, and go to state 97
    NEQUAL         shift, and go to state 98
    GEQUAL         shift, and go to state 99
    LEQUAL         shift, and go to state 100


State 137

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr
   59 upload_list: upload_list COMMA expr .

    LESS_THAN     shift, and go to state 90
    GREATER_THAN  shift, and go to state 91
    PLUS          shift, and go to state 92
    MINUS         shift, and go to state 93
    MULT          shift, and go to state 94
    DIV           shift, and go to state 95
    MOD           shift, and go to state 96
    EQUAL         shift, and go to state 97
    NEQUAL        shift, and go to state 98
    GEQUAL        shift, and go to state 99
    LEQUAL        shift, and go to state 100

    $default  reduce using rule 59 (upload_list)


State 138

   67 vec3: OPEN_BRACKET expr COMMA expr COMMA expr CLOSE_BRACKET .

    $default  reduce using rule 67 (vec3)


State 139

   68 vec4: OPEN_BRACKET expr COMMA expr COMMA expr COMMA . expr CLOSE_BRACKET

    BOOL          shift, and go to state 54
    INT           shift, and go to state 55
    FLOAT         shift, and go to state 56
    IDENTIFIER    shift, and go to state 57
    OPEN_PAREN    shift, and go to state 58
    OPEN_BRACKET  shift, and go to state 59
    NOT           shift, and go to state 60
    MINUS         shift, and go to state 61

    expr     go to state 140
    uniform  go to state 63
    invoke   go to state 64
    bool     go to state 65
    scalar   go to state 66
    vec2     go to state 67
    vec3     go to state 68
    vec4     go to state 69


State 140

   16 expr: expr . PLUS expr
   17     | expr . MINUS expr
   18     | expr . MULT expr
   19     | expr . DIV expr
   20     | expr . MOD expr
   21     | expr . LESS_THAN expr
   22     | expr . GREATER_THAN expr
   23     | expr . EQUAL expr
   24     | expr . NEQUAL expr
   25     | expr . LEQUAL expr
   26     | expr . GEQUAL expr
   68 vec4: OPEN_BRACKET expr COMMA expr COMMA expr COMMA expr . CLOSE_BRACKET

    LESS_THAN      shift, and go to state 90
    GREATER_THAN   shift, and go to state 91
    CLOSE_BRACKET  shift, and go to state 141
    PLUS           shift, and go to state 92
    MINUS          shift, and go to state 93
    MULT           shift, and go to state 94
    DIV            shift, and go to state 95
    MOD            shift, and go to state 96
    EQUAL          shift, and go to state 97
    NEQUAL         shift, and go to state 98
    GEQUAL         shift, and go to state 99
    LEQUAL         shift, and go to state 100


State 141

   68 vec4: OPEN_BRACKET expr COMMA expr COMMA expr COMMA expr CLOSE_BRACKET .

    $default  reduce using rule 68 (vec4)
