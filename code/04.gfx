import "utils.gfx";	

vert basic(vec3 pos, vec3 color, vec2 uv) {
	mat4 model;
	mat4 view;
	mat4 proj;
	
	func main() {
		FinalPosition = proj * view * model * [pos, 1.0];
		Color = color;
		UV = uv;
	}
}(vec4 FinalPosition, vec3 Color, vec2 UV)

frag basic(vec3 Color, vec2 UV) {
	texture2D tex;
	
	func main() {
		FinalColor = texture(tex, UV) * [Color, 1.0];
	}
}(vec4 FinalColor)

buffer tri;
mat4 model = mat4_identity();

texture2D tex = "wall.jpg";

func init(){
	
	// View matrix
	vec3 eye = [0, 0, 5]; // The position of the camera
	vec3 at = [0, 0, 0]; // Where the camera is looking at
	vec3 up = [0, 1, 0]; // The global up direction of the camera, usually (0, 1, 0)
	mat4 view = mat4_lookat(eye, at, up);

	// Perspective projection
	float fov = PI * 0.25; //  The vertical FOV (field-of-view) of the camera
	float aspect = WIDTH / HEIGHT; // The aspect ratio of the screen
	float near = 0.1; // The distance of the near clipping plane from the eye (everything behind this won't be seen)
	float far = 100.0; // The distance of the far clipping plane from the eye (everything after this won't be seen)
	mat4 persp = mat4_perspective(fov, aspect, near, far);	
	
	tri.pos += [1.0, -1.0, 0.0], [-1.0, 1.0, 0.0], [-1.0, -1.0, 0.0], [1.0, 1.0, 0.0];
	tri.color += [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0];
	tri.uv += [1.0, 0.0], [0.0, 1.0], [0.0, 0.0], [1.0, 1.0];
    tri.indices += 0, 1, 2, 1, 0, 3;
	
	basic.model = model;
	basic.view = view;
	basic.proj = persp;
	basic.tex = tex;
}

func loop(){
	model *= mat4_rotation_z(0.01);
	basic.model = model;	
	draw tri using basic;
}
