func normalize(v) {
    return v / |v|;
}

func mat3_identity() {
    return [[1,0,0],[0,1,0],[0,0,1]];
}

func mat3_translation(x, y) {
    return [[1,0,0],[0,1,0],[x,y,1]];
}

func mat3_rotation(angle) {
    c = cos(angle); s = sin(angle);
    return [[c,-s,0],[s,c,0],[0,0,1]];
}

func mat3_scale(s) {
    return [[s,0,0],[0,s,0],[0,0,1]];
}

func mat4_identity(s) {
    return [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]];
}

func mat4_translation(x, y, z) {
    return [[1,0,0,0],[0,1,0,0],[0,0,1,0],[x,y,z,1]];
}

func mat4_rotation_x(angle) {
    c = cos(angle); s = sin(angle);
    return [[1,0,0,0],[0,c,-s,0],[0,s,c,0],[0,0,0,1]];
}

func mat4_rotation_y(angle) {
    c = cos(angle); s = sin(angle);
    return [[c,0,s,0],[0,1,0,0],[-s,0,c,0],[0,0,0,1]];
}

func mat4_rotation_z(angle) {
    c = cos(angle); s = sin(angle);
    return [[c,-s,0,0],[s,c,0,0],[0,0,0,0],[0,0,0,1]];
}

func mat4_scale(s) {
    return [[s,0,0,0],[0,s,0,0],[0,0,s,0],[0,0,0,1]];
}

func mat4_perspective(fov, aspect, near, far) {
    f = 1.0 / tan(fov * 0.5);
    nf = 1.0 / (near - far);
    return [
        [f/aspect, 0, 0, 0],
        [0, f, 0, 0],
        [0, 0, (far + near) * nf, -1],
        [0, 0, (2 * far * near) * nf, 0]
    ];
}
