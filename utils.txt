func normalize(var v) {
    return v / |v|;
}

func mat2_identity() {
    return [[1,0],[0,1]];
}

func mat2_transpose(mat2 m) {
    return [[m[0][0], m[1][0]], [m[0][1], m[1][1]]];
}

func mat2_inverse(mat2 m) {
    if(|m| == 0) {
        return [[0,0],[0,0]];
    } 

    float a = m[0][0];
    float b = m[0][1];
    float c = m[1][0];
    float d = m[1][1];

    return [[d, -b],[-c, a]] / |m|;
}

func mat3_identity() {
    return [[1,0,0],[0,1,0],[0,0,1]];
}

func mat3_transpose(mat3 m) {
    return [
        [m[0][0], m[1][0], m[2][0]],
        [m[0][1], m[1][1], m[2][1]],
        [m[0][2], m[1][2], m[2][2]]
    ];
}

func mat3_inverse(mat3 m) {
    if(|m| == 0) {
        return [[0,0,0],[0,0,0],[0,0,0]];  
    }

    mat3 minors = [
        [ m[1][1] * m[2][2] - m[1][2] * m[2][1], m[1][0] * m[2][2] - m[1][2] * m[2][0], m[1][0] * m[2][1] - m[1][1] * m[2][0] ],
        [ m[0][1] * m[2][2] - m[0][2] * m[2][1], m[0][0] * m[2][2] - m[0][2] * m[2][0], m[0][0] * m[2][1] - m[0][1] * m[2][0] ],
        [ m[0][1] * m[1][2] - m[0][2] * m[1][1], m[0][0] * m[1][2] - m[0][2] * m[1][0], m[0][0] * m[1][1] - m[0][1] * m[1][0] ]
    ];

        for(i in 0,3,1) {
            for(j in 0,3,1) {
                if(((i + j) % 2) == 1) {
                    minors[i][j] *= -1;
                }
            }
        }

        return mat3_transpose(minors) / |m|;
}

func mat3_translation(float x, float y) {
    return [[1,0,0],[0,1,0],[x,y,1]];
}

func mat3_rotation(float angle) {
    float c = cos(angle); float s = sin(angle);
    return [[c,-s,0],[s,c,0],[0,0,1]];
}

func mat3_scale(float s) {
    return [[s,0,0],[0,s,0],[0,0,1]];
}

func mat4_identity() {
    return [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]];
}

func mat4_transpose(mat4 m) {
    return [
        [m[0][0], m[1][0], m[2][0], m[3][0]],
        [m[0][1], m[1][1], m[2][1], m[3][1]],
        [m[0][2], m[1][2], m[2][2], m[3][2]],
        [m[0][3], m[1][3], m[2][3], m[3][3]]
    ];
}

func mat4_inverse(mat4 m) {
    if(|m| == 0) {
        return [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]];  
    }

    mat4 minors = [
        [|mat4_truncate(m,0,0)|, |mat4_truncate(m,0,1)|, |mat4_truncate(m,0,2)|, |mat4_truncate(m,0,3)|],  
        [|mat4_truncate(m,1,0)|, |mat4_truncate(m,1,1)|, |mat4_truncate(m,1,2)|, |mat4_truncate(m,1,3)|],  
        [|mat4_truncate(m,2,0)|, |mat4_truncate(m,2,1)|, |mat4_truncate(m,2,2)|, |mat4_truncate(m,2,3)|],  
        [|mat4_truncate(m,3,0)|, |mat4_truncate(m,3,1)|, |mat4_truncate(m,3,2)|, |mat4_truncate(m,3,3)|]
    ];

    for(i in 0,4,1) {
        for(j in 0,4,1) {
            if(((i + j) % 2) == 1) {
                minors[i][j] *= -1;
            }
        }
    }

    return mat4_transpose(minors) / |m|;
}

func mat4_truncate(mat4 m, int row, int column) {
    int r = 0;
    int c = 0;

    mat3 out = [[0,0,0],[0,0,0],[0,0,0]];
    for(i in 0,4,1) {
        c = 0;
        for(j in 0, 4, 1) {
            if(j != column and i != row) {
                out[r][c] = m[i][j];
                c += 1;
            }
        }
        if(i != row) {
            r += 1;
        }
    }

    return out;
}

func mat4_translation(float x, float y, float z) {
    return [[1,0,0,0],[0,1,0,0],[0,0,1,0],[x,y,z,1]];
}

func mat4_rotation_x(float angle) {
    float c = cos(angle); float s = sin(angle);
    return [[1,0,0,0],[0,c,-s,0],[0,s,c,0],[0,0,0,1]];
}

func mat4_rotation_y(float angle) {
    float c = cos(angle); float s = sin(angle);
    return [[c,0,s,0],[0,1,0,0],[-s,0,c,0],[0,0,0,1]];
}

func mat4_rotation_z(float angle) {
    float c = cos(angle); float s = sin(angle);
    return [[c,-s,0,0],[s,c,0,0],[0,0,0,0],[0,0,0,1]];
}

func mat4_scale(float s) {
    return [[s,0,0,0],[0,s,0,0],[0,0,s,0],[0,0,0,1]];
}

func mat4_lookat(vec3 eye, vec3 at, vec3 up) {
    vec3 front = normalize(eye - at);
    up = normalize(up);
    vec3 right = up % front;
    up = front % right;
    return [[right[0], up[0], front[0], 0],
            [right[1], up[1], front[1], 0],
            [right[2], up[2], front[2], 0],
            [-(right*eye), -(up*eye), -(front*eye), 1]];
}

func mat4_perspective(float fov, float aspect, float near, float far) {
    float f = 1.0 / tan(fov * 0.5);
    float nf = 1.0 / (near - far);
    return [
        [f/aspect, 0, 0, 0],
        [0, f, 0, 0],
        [0, 0, (far + near) * nf, -1],
        [0, 0, (2 * far * near) * nf, 0]
    ];
}
